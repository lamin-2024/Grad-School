/*----------------------------------------------------------------------------------
Name Lamin Jammeh
CLass: EE417 Summer 2024
Lesson 08 HW Question 2
Group: Ron Kalin/ Lamin Jammeh
Project Description: Control_Unit for Reciever (Rx) will receiver control the datapath
for the UART Rx. Once the Data is Transmitted by the Host process. the Control_unit will
perform several checks before accepting the recieved data and tells the datapath to store
the received data in the shift_register
-------------------------------------------------------------------------------------*/

module Control_Unit_Rx	#(parameter wordsize = 8,
								  parameter half_word = word_size/2,
								  parameter Num_state_bits = 2
								 )(
								//state the Outputs of the COntroller Unit
							    Output reg	read_not_ready_out,
								 Output reg Error1,
								 Output reg Error2,
								 Output reg clr_Sample_counter,
								 Output reg inc_Sample_counter,
								 Output reg clr_Bit_counter,
								 Output reg inc_Bit_counter,
								 Output reg shift,
								 Output reg load,
							  //define the inputs of the Controller Unit
							    input read_not_ready_in,
								 input Ser_in_0,
								 input SC_eq_3,
								 input SC_lt_7,
								 input BC_eq_8
								 input Sample_clk,
								 input rst_b
								 );
								 
//Parameterize the different states of the Controller Unit as a 2-bit one-hot counter
parameter idle      = 2'b00;
parameter starting  = 2'b01;
parameter receiving = 2'b10;

//define the internal registers for state, next_stae and shift_reg
reg	[word_size-1:0]	RCV_shftreg;					//creates a temp register of 8-bits to store the received data
reg	[Num_state_bits-1:0]	 state, next_state;		//creates temp register of 2-bits for the stae transition

//state Transition logic
always @(posedge Sample_clk)
	if   (rst_b == 1'b0) 
		  state <= idle;
	else state <= next_state
	/*---------------   for the State Transition--------------------------
	---if reset is low (0) the controller unit will remain in idle
	---if reset is high (1) the controller will move to the next-state----*/
	
//create a initial or default condition for the controller
always @(state, Ser_in_0, SC_eq_3, SC_lt_7, read_not_ready_in)
	begin
		read_not_ready_out = 0;
		clr_Sample_counter = 0;
		clr_Bit_counter    = 0;
		inc_Sample_counter = 0;
		inc_Bit_counter    = 0;
		shift              = 0;
		Error1             = 0;
		Error2             = 0;
		load               = 0;
		next_state         = idle;
		//create the Next State logic
		case (state)
			idle:	if   (Ser_in_0 == 1'b1)							
						  next_state = starting;
					else next_state = idle;
       /*-----------------@ idle------------------------------
		 --- if Ser_in_0 is high (1) move to starting state------
		 --- if Ser_in_0 is low (0) remain idle-----------------*/
			starting: if (

								 
								 
								  