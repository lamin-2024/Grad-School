|TopModule
clk => clk.IN2
reset => reset.IN2
count[0] << DataPath:datapath.count
count[1] << DataPath:datapath.count
count[2] << DataPath:datapath.count
count[3] << DataPath:datapath.count
count[4] << DataPath:datapath.count
count[5] << DataPath:datapath.count
count[6] << DataPath:datapath.count
count[7] << DataPath:datapath.count


|TopModule|DataPath:datapath
clk => done~reg0.CLK
clk => cycle_count[0].CLK
clk => cycle_count[1].CLK
clk => cycle_count[2].CLK
clk => cycle_count[3].CLK
clk => cycle_count[4].CLK
clk => count[0]~reg0.CLK
clk => count[1]~reg0.CLK
clk => count[2]~reg0.CLK
clk => count[3]~reg0.CLK
clk => count[4]~reg0.CLK
clk => count[5]~reg0.CLK
clk => count[6]~reg0.CLK
clk => count[7]~reg0.CLK
reset => done~reg0.ACLR
reset => cycle_count[0].ACLR
reset => cycle_count[1].ACLR
reset => cycle_count[2].ACLR
reset => cycle_count[3].ACLR
reset => cycle_count[4].ACLR
reset => count[0]~reg0.PRESET
reset => count[1]~reg0.ACLR
reset => count[2]~reg0.ACLR
reset => count[3]~reg0.ACLR
reset => count[4]~reg0.ACLR
reset => count[5]~reg0.ACLR
reset => count[6]~reg0.ACLR
reset => count[7]~reg0.ACLR
shift_left => always0.IN0
shift_left => count.OUTPUTSELECT
shift_left => count.OUTPUTSELECT
shift_left => count.OUTPUTSELECT
shift_left => count.OUTPUTSELECT
shift_left => count.OUTPUTSELECT
shift_left => count.OUTPUTSELECT
shift_left => count.OUTPUTSELECT
shift_left => count.OUTPUTSELECT
shift_right => always0.IN1
shift_right => count.OUTPUTSELECT
shift_right => count.OUTPUTSELECT
shift_right => count.OUTPUTSELECT
shift_right => count.OUTPUTSELECT
shift_right => count.OUTPUTSELECT
shift_right => count.OUTPUTSELECT
shift_right => count.OUTPUTSELECT
shift_right => count.OUTPUTSELECT
load => count.OUTPUTSELECT
load => count.OUTPUTSELECT
load => count.OUTPUTSELECT
load => count.OUTPUTSELECT
load => count.OUTPUTSELECT
load => count.OUTPUTSELECT
load => count.OUTPUTSELECT
load => count.OUTPUTSELECT
load => cycle_count.OUTPUTSELECT
load => cycle_count.OUTPUTSELECT
load => cycle_count.OUTPUTSELECT
load => cycle_count.OUTPUTSELECT
load => cycle_count.OUTPUTSELECT
load => done.OUTPUTSELECT
count[0] <= count[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
count[1] <= count[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
count[2] <= count[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
count[3] <= count[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
count[4] <= count[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
count[5] <= count[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
count[6] <= count[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
count[7] <= count[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
done <= done~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopModule|Controller:controller
clk => state~1.DATAIN
reset => state~3.DATAIN
done => next_state.DONE.DATAB
done => Selector0.IN2
shift_left <= shift_left.DB_MAX_OUTPUT_PORT_TYPE
shift_right <= shift_right.DB_MAX_OUTPUT_PORT_TYPE
load <= load.DB_MAX_OUTPUT_PORT_TYPE


