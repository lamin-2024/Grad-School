# Reading pref.tcl
# //  Questa Intel Starter FPGA Edition-64
# //  Version 2021.2 win64 Apr 14 2021
# //
# //  Copyright 1991-2021 Mentor Graphics Corporation
# //  All Rights Reserved.
# //
# //  QuestaSim and its associated documentation contain trade
# //  secrets and commercial or financial information that are the property of
# //  Mentor Graphics Corporation and are privileged, confidential,
# //  and exempt from disclosure under the Freedom of Information Act,
# //  5 U.S.C. Section 552. Furthermore, this information
# //  is prohibited from disclosure under the Trade Secrets Act,
# //  18 U.S.C. Section 1905.
# //
# do FourBitJerkyCounterb_run_msim_rtl_verilog.do
# if {[file exists rtl_work]} {
# 	vdel -lib rtl_work -all
# }
# vlib rtl_work
# vmap work rtl_work
# Questa Intel Starter FPGA Edition-64 vmap 2021.2 Lib Mapping Utility 2021.04 Apr 14 2021
# vmap work rtl_work 
# Copying c:/intelfpga_lite/22.1std/questa_fse/win64/../modelsim.ini to modelsim.ini
# Modifying modelsim.ini
# 
# vlog -vlog01compat -work work +incdir+C:/Users/lmnjm/OneDrive/Documents/Summer\ 2024/EE417\ Programmable\ Logic\ Devices/Lecture\ 04/Quartus\ +\ Questa\ codes/HW4/Q2 {C:/Users/lmnjm/OneDrive/Documents/Summer 2024/EE417 Programmable Logic Devices/Lecture 04/Quartus + Questa codes/HW4/Q2/FourBitJerkyCounterb.v}
# Questa Intel Starter FPGA Edition-64 vlog 2021.2 Compiler 2021.04 Apr 14 2021
# Start time: 18:24:02 on Jun 09,2024
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/Users/lmnjm/OneDrive/Documents/Summer 2024/EE417 Programmable Logic Devices/Lecture 04/Quartus + Questa codes/HW4/Q2" C:/Users/lmnjm/OneDrive/Documents/Summer 2024/EE417 Programmable Logic Devices/Lecture 04/Quartus + Questa codes/HW4/Q2/FourBitJerkyCounterb.v 
# -- Compiling module FourBitJerkyCounterb
# 
# Top level modules:
# 	FourBitJerkyCounterb
# End time: 18:24:02 on Jun 09,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# vlog -vlog01compat -work work +incdir+C:/Users/lmnjm/OneDrive/Documents/Summer\ 2024/EE417\ Programmable\ Logic\ Devices/Lecture\ 04/Quartus\ +\ Questa\ codes/HW4/Q2 {C:/Users/lmnjm/OneDrive/Documents/Summer 2024/EE417 Programmable Logic Devices/Lecture 04/Quartus + Questa codes/HW4/Q2/FourBitJerkyCounterb_tb.v}
# Questa Intel Starter FPGA Edition-64 vlog 2021.2 Compiler 2021.04 Apr 14 2021
# Start time: 18:24:02 on Jun 09,2024
# vlog -reportprogress 300 -vlog01compat -work work "+incdir+C:/Users/lmnjm/OneDrive/Documents/Summer 2024/EE417 Programmable Logic Devices/Lecture 04/Quartus + Questa codes/HW4/Q2" C:/Users/lmnjm/OneDrive/Documents/Summer 2024/EE417 Programmable Logic Devices/Lecture 04/Quartus + Questa codes/HW4/Q2/FourBitJerkyCounterb_tb.v 
# -- Compiling module FourBitJerkyCounterb_tb
# 
# Top level modules:
# 	FourBitJerkyCounterb_tb
# End time: 18:24:02 on Jun 09,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
# 
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cyclonev_ver -L cyclonev_hssi_ver -L cyclonev_pcie_hip_ver -L rtl_work -L work -voptargs="+acc"  FourBitJerkyCounterb_tb
# vsim -t 1ps -L altera_ver -L lpm_ver -L sgate_ver -L altera_mf_ver -L altera_lnsim_ver -L cyclonev_ver -L cyclonev_hssi_ver -L cyclonev_pcie_hip_ver -L rtl_work -L work -voptargs=""+acc"" FourBitJerkyCounterb_tb 
# Start time: 18:24:02 on Jun 09,2024
# ** Note: (vsim-3812) Design is being optimized...
# ** Note: (vopt-143) Recognized 1 FSM in module "FourBitJerkyCounterb(fast)".
# Loading work.FourBitJerkyCounterb_tb(fast)
# Loading work.FourBitJerkyCounterb(fast)
# 
# add wave *
# view structure
# .main_pane.structure.interior.cs.body.struct
# view signals
# .main_pane.objects.interior.cs.body.tree
# run -all
# ________________________________output_count = -count-
# clk_input = 0: rst_input = 1:  output_count = 128 
# clk_input = 1: rst_input = 1:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  64 
# clk_input = 0: rst_input = 0:  output_count =  64 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  32 
# clk_input = 0: rst_input = 0:  output_count =  32 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  16 
# clk_input = 0: rst_input = 0:  output_count =  16 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   8 
# clk_input = 0: rst_input = 0:  output_count =   8 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   4 
# clk_input = 0: rst_input = 0:  output_count =   4 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   2 
# clk_input = 0: rst_input = 0:  output_count =   2 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   1 
# clk_input = 0: rst_input = 0:  output_count =   1 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  64 
# clk_input = 0: rst_input = 0:  output_count =  64 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  32 
# clk_input = 0: rst_input = 0:  output_count =  32 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  16 
# clk_input = 0: rst_input = 0:  output_count =  16 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   8 
# clk_input = 0: rst_input = 0:  output_count =   8 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   4 
# clk_input = 0: rst_input = 0:  output_count =   4 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   2 
# clk_input = 0: rst_input = 0:  output_count =   2 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   1 
# clk_input = 0: rst_input = 0:  output_count =   1 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  64 
# clk_input = 0: rst_input = 0:  output_count =  64 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 1:  output_count = 128 
# clk_input = 1: rst_input = 1:  output_count = 128 
# clk_input = 0: rst_input = 1:  output_count = 128 
# clk_input = 1: rst_input = 1:  output_count = 128 
# clk_input = 0: rst_input = 1:  output_count = 128 
# clk_input = 1: rst_input = 1:  output_count = 128 
# clk_input = 0: rst_input = 1:  output_count = 128 
# clk_input = 1: rst_input = 1:  output_count = 128 
# clk_input = 0: rst_input = 1:  output_count = 128 
# clk_input = 1: rst_input = 1:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  64 
# clk_input = 0: rst_input = 0:  output_count =  64 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  32 
# clk_input = 0: rst_input = 0:  output_count =  32 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =  16 
# clk_input = 0: rst_input = 0:  output_count =  16 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   8 
# clk_input = 0: rst_input = 0:  output_count =   8 
# clk_input = 1: rst_input = 0:  output_count = 128 
# clk_input = 0: rst_input = 0:  output_count = 128 
# clk_input = 1: rst_input = 0:  output_count =   4 
# clk_input = 0: rst_input = 0:  output_count =   4 
# clk_input = 1: rst_input = 0:  output_count = 128 
# ** Note: $stop    : C:/Users/lmnjm/OneDrive/Documents/Summer 2024/EE417 Programmable Logic Devices/Lecture 04/Quartus + Questa codes/HW4/Q2/FourBitJerkyCounterb_tb.v(34)
#    Time: 460 ps  Iteration: 0  Instance: /FourBitJerkyCounterb_tb
# Break in Module FourBitJerkyCounterb_tb at C:/Users/lmnjm/OneDrive/Documents/Summer 2024/EE417 Programmable Logic Devices/Lecture 04/Quartus + Questa codes/HW4/Q2/FourBitJerkyCounterb_tb.v line 34
# End time: 22:13:11 on Jun 09,2024, Elapsed time: 3:49:09
# Errors: 0, Warnings: 0
